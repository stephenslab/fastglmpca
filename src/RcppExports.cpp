// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_loadings
arma::mat update_loadings(const arma::mat& F_T, const arma::mat& F_T_sqrd, arma::mat& L, const arma::mat& Y_T, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_loadings(SEXP F_TSEXP, SEXP F_T_sqrdSEXP, SEXP LSEXP, SEXP Y_TSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type F_T(F_TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type F_T_sqrd(F_T_sqrdSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_T(Y_TSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_loadings(F_T, F_T_sqrd, L, Y_T, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_factors
arma::mat update_factors(const arma::mat& L_T, const arma::mat& L_T_sqrd, arma::mat& FF, const arma::mat& Y, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_factors(SEXP L_TSEXP, SEXP L_T_sqrdSEXP, SEXP FFSEXP, SEXP YSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L_T(L_TSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type L_T_sqrd(L_T_sqrdSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type FF(FFSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_factors(L_T, L_T_sqrd, FF, Y, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_loadings_irls
arma::mat update_loadings_irls(const arma::mat& F_T, arma::mat& L, const arma::mat& Y_T, const arma::vec& update_vec, const arma::vec& constant_vec, unsigned int num_iter);
RcppExport SEXP _plash_update_loadings_irls(SEXP F_TSEXP, SEXP LSEXP, SEXP Y_TSEXP, SEXP update_vecSEXP, SEXP constant_vecSEXP, SEXP num_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type F_T(F_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_T(Y_TSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type update_vec(update_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type constant_vec(constant_vecSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(update_loadings_irls(F_T, L, Y_T, update_vec, constant_vec, num_iter));
    return rcpp_result_gen;
END_RCPP
}
// update_factors_irls
arma::mat update_factors_irls(const arma::mat& L_T, arma::mat& FF, const arma::mat& Y, const arma::vec& update_vec, const arma::vec& constant_vec, unsigned int num_iter);
RcppExport SEXP _plash_update_factors_irls(SEXP L_TSEXP, SEXP FFSEXP, SEXP YSEXP, SEXP update_vecSEXP, SEXP constant_vecSEXP, SEXP num_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L_T(L_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type FF(FFSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type update_vec(update_vecSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type constant_vec(constant_vecSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(update_factors_irls(L_T, FF, Y, update_vec, constant_vec, num_iter));
    return rcpp_result_gen;
END_RCPP
}
// update_loadings_log1p
arma::mat update_loadings_log1p(const arma::mat& F_T, arma::mat& L, const arma::mat& Y_T, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_loadings_log1p(SEXP F_TSEXP, SEXP LSEXP, SEXP Y_TSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type F_T(F_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y_T(Y_TSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_loadings_log1p(F_T, L, Y_T, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_factors_log1p
arma::mat update_factors_log1p(const arma::mat& L_T, arma::mat& FF, const arma::mat& Y, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_factors_log1p(SEXP L_TSEXP, SEXP FFSEXP, SEXP YSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L_T(L_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type FF(FFSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_factors_log1p(L_T, FF, Y, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_loadings_log1p_sp
arma::mat update_loadings_log1p_sp(const arma::mat& F_T, arma::mat& L, const arma::sp_mat& Y_T, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_loadings_log1p_sp(SEXP F_TSEXP, SEXP LSEXP, SEXP Y_TSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type F_T(F_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Y_T(Y_TSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_loadings_log1p_sp(F_T, L, Y_T, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_factors_log1p_sp
arma::mat update_factors_log1p_sp(const arma::mat& L_T, arma::mat& FF, const arma::sp_mat& Y, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_factors_log1p_sp(SEXP L_TSEXP, SEXP FFSEXP, SEXP YSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L_T(L_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type FF(FFSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_factors_log1p_sp(L_T, FF, Y, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_loadings_sp
arma::mat update_loadings_sp(const arma::mat& F_T, arma::mat& L, const arma::sp_mat& Y_T, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_loadings_sp(SEXP F_TSEXP, SEXP LSEXP, SEXP Y_TSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type F_T(F_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Y_T(Y_TSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_loadings_sp(F_T, L, Y_T, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}
// update_factors_sp
arma::mat update_factors_sp(const arma::mat& L_T, arma::mat& FF, const arma::sp_mat& Y, const std::vector<int> update_indices, unsigned int num_iter, const bool line_search, const double alpha, const double beta);
RcppExport SEXP _plash_update_factors_sp(SEXP L_TSEXP, SEXP FFSEXP, SEXP YSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L_T(L_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type FF(FFSEXP);
    Rcpp::traits::input_parameter< const arma::sp_mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< const bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const double >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(update_factors_sp(L_T, FF, Y, update_indices, num_iter, line_search, alpha, beta));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_plash_update_loadings", (DL_FUNC) &_plash_update_loadings, 9},
    {"_plash_update_factors", (DL_FUNC) &_plash_update_factors, 9},
    {"_plash_update_loadings_irls", (DL_FUNC) &_plash_update_loadings_irls, 6},
    {"_plash_update_factors_irls", (DL_FUNC) &_plash_update_factors_irls, 6},
    {"_plash_update_loadings_log1p", (DL_FUNC) &_plash_update_loadings_log1p, 8},
    {"_plash_update_factors_log1p", (DL_FUNC) &_plash_update_factors_log1p, 8},
    {"_plash_update_loadings_log1p_sp", (DL_FUNC) &_plash_update_loadings_log1p_sp, 8},
    {"_plash_update_factors_log1p_sp", (DL_FUNC) &_plash_update_factors_log1p_sp, 8},
    {"_plash_update_loadings_sp", (DL_FUNC) &_plash_update_loadings_sp, 8},
    {"_plash_update_factors_sp", (DL_FUNC) &_plash_update_factors_sp, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_plash(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
