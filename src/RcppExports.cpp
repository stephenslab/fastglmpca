// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// update_factors_faster_parallel
void update_factors_faster_parallel(const arma::mat& L_T, arma::mat& FF, const arma::mat& M, const std::vector<int> update_indices, unsigned int num_iter, bool line_search, double alpha, double beta);
RcppExport SEXP _fastglmpca_update_factors_faster_parallel(SEXP L_TSEXP, SEXP FFSEXP, SEXP MSEXP, SEXP update_indicesSEXP, SEXP num_iterSEXP, SEXP line_searchSEXP, SEXP alphaSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L_T(L_TSEXP);
    Rcpp::traits::input_parameter< arma::mat& >::type FF(FFSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type M(MSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type update_indices(update_indicesSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type num_iter(num_iterSEXP);
    Rcpp::traits::input_parameter< bool >::type line_search(line_searchSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type beta(betaSEXP);
    update_factors_faster_parallel(L_T, FF, M, update_indices, num_iter, line_search, alpha, beta);
    return R_NilValue;
END_RCPP
}
// big_exp_crossprod
double big_exp_crossprod(const arma::mat& L, const arma::mat& F, const int n, const int p);
RcppExport SEXP _fastglmpca_big_exp_crossprod(SEXP LSEXP, SEXP FSEXP, SEXP nSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(big_exp_crossprod(L, F, n, p));
    return rcpp_result_gen;
END_RCPP
}
// big_elementwise_mult_crossprod
double big_elementwise_mult_crossprod(const arma::mat& L, const arma::mat& F, const arma::vec& nonzero_y, const std::vector<int> nonzero_y_i_idx, const std::vector<int> nonzero_y_j_idx, const int num_nonzero_y);
RcppExport SEXP _fastglmpca_big_elementwise_mult_crossprod(SEXP LSEXP, SEXP FSEXP, SEXP nonzero_ySEXP, SEXP nonzero_y_i_idxSEXP, SEXP nonzero_y_j_idxSEXP, SEXP num_nonzero_ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type F(FSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type nonzero_y(nonzero_ySEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type nonzero_y_i_idx(nonzero_y_i_idxSEXP);
    Rcpp::traits::input_parameter< const std::vector<int> >::type nonzero_y_j_idx(nonzero_y_j_idxSEXP);
    Rcpp::traits::input_parameter< const int >::type num_nonzero_y(num_nonzero_ySEXP);
    rcpp_result_gen = Rcpp::wrap(big_elementwise_mult_crossprod(L, F, nonzero_y, nonzero_y_i_idx, nonzero_y_j_idx, num_nonzero_y));
    return rcpp_result_gen;
END_RCPP
}
// deriv_product
arma::mat deriv_product(const arma::mat& L, const arma::mat& F);
RcppExport SEXP _fastglmpca_deriv_product(SEXP LSEXP, SEXP FSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type L(LSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type F(FSEXP);
    rcpp_result_gen = Rcpp::wrap(deriv_product(L, F));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_fastglmpca_update_factors_faster_parallel", (DL_FUNC) &_fastglmpca_update_factors_faster_parallel, 8},
    {"_fastglmpca_big_exp_crossprod", (DL_FUNC) &_fastglmpca_big_exp_crossprod, 4},
    {"_fastglmpca_big_elementwise_mult_crossprod", (DL_FUNC) &_fastglmpca_big_elementwise_mult_crossprod, 6},
    {"_fastglmpca_deriv_product", (DL_FUNC) &_fastglmpca_deriv_product, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_fastglmpca(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
